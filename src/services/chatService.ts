

import { SearchResult } from './openaiService';
import { getGlobalApiKey, hasGlobalApiKey } from '../constants/apiKeys';

export interface ChatMessage {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: Date;
}

// Fun√ß√£o para construir os prompts para a API OpenAI
const buildChatPrompt = (messages: ChatMessage[]) => {
  return messages.map(msg => ({
    role: msg.role as 'user' | 'assistant' | 'system',
    content: msg.content
  }));
};

// Fun√ß√£o para realizar o chat com a API OpenAI
export const sendChatMessage = async (
  messages: ChatMessage[],
  userApiKey?: string
): Promise<string> => {
  try {
    // Prioridade: 1) Chave do usu√°rio, 2) Chave global/ambiente
    const apiKey = userApiKey || getGlobalApiKey();
    
    // Validar se temos uma chave v√°lida para usar
    if (!apiKey || apiKey === "sk-adicione-uma-chave-valida-aqui" || apiKey.length < 20 || !apiKey.startsWith('sk-')) {
      throw new Error(`
üîë CHAVE API NECESS√ÅRIA: 
Para usar o chat, voc√™ precisa configurar uma chave OpenAI v√°lida.

üìù Como obter uma chave:
1. V√° para https://platform.openai.com/api-keys
2. Crie uma nova chave API
3. Cole aqui no chat ou configure nas configura√ß√µes

üí° A chave deve come√ßar com 'sk-' e ter pelo menos 50 caracteres.
      `);
    }
    
    console.log('üöÄ === ENVIANDO MENSAGEM PARA OPENAI ===');
    console.log('üîë Usando chave:', apiKey.substring(0, 10) + '...');
    console.log('üìè Tamanho da chave:', apiKey.length);
    console.log('üéØ Formato v√°lido?', apiKey.startsWith('sk-'));

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: buildChatPrompt(messages),
        temperature: 0.7,
        max_tokens: 1000,
      }),
    });

    console.log('üì° Resposta da API OpenAI - Status:', response.status);

    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå Erro completo da API OpenAI:', errorData);
      
      if (response.status === 401) {
        throw new Error(`
‚ùå CHAVE API INV√ÅLIDA!

üîç Detalhes do erro:
- Status: ${response.status}
- Chave enviada: ${apiKey.substring(0, 15)}...
- Erro da API: ${errorData.error?.message || 'N√£o especificado'}

üìù Solu√ß√£o:
1. Verifique se sua chave OpenAI est√° ativa
2. Confirme se tem cr√©ditos dispon√≠veis
3. Gere uma nova chave se necess√°rio
        `);
      }
      
      throw new Error(`Erro na API: ${response.status} - ${errorData.error?.message || 'Erro desconhecido'}`);
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;
    
    if (!content) {
      throw new Error('Resposta vazia da API');
    }
    
    console.log('‚úÖ Resposta recebida com sucesso da OpenAI');
    return content;
  } catch (error) {
    console.error('‚ùå Erro ao enviar mensagem:', error);
    throw error;
  }
};

